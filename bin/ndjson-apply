#!/usr/bin/env node
const path = require('path')
const { program } = require('commander')
const { version, description } = require('../package.json')

program
.description(description)
.arguments('<js-function-module> [function-arguments...]')
.option('-d, --diff', 'Preview the changes between the input and the transformation output')
.option('-f, --filter', 'Use the js function only to filter lines: lines returning `true` will be let through. No transformation will be applied.')
.version(version)
.addHelpText('after', `
Examples:
  # transform
  cat some_data.ndjson | ndjson-apply some_transform_function.js > some_data_transformed.ndjson

  # preview transformation changes
  cat some_data.ndjson | ndjson-apply some_transform_function.js --diff

  # filter lines
  cat some_data.ndjson | ndjson-apply some_filter_function.js --filter
`)

program.parse(process.argv)

const [ fnModulePath, ...additionalArgs ] = program.args

const { diff: showDiff, filter: filterOnly } = program.opts()

if (!fnModulePath) {
  if (process.stdin.isTTY) program.help()
  else throw new Error('missing function module path')
}

const resolvedPath = path.resolve(fnModulePath)
let transformFn = require(resolvedPath)

if (additionalArgs[0]) {
  const key = additionalArgs[0]
  if (typeof transformFn[key] === 'function') {
    additionalArgs.shift()
    transformFn = transformFn[key]
  }
}

if (typeof transformFn !== 'function') throw new Error(`${resolvedPath} doesn't export a function`)

const split = require('split')
const through = require('through')
const { isAsyncFunction } = require('../lib/utils')
const lineTransformers = require('../lib/line_transformers')
const handleErrors = require('../lib/handle_errors')

const transformer = isAsyncFunction(transformFn) ? lineTransformers.async : lineTransformers.sync

process.stdin
.pipe(split())
.pipe(through(transformer(transformFn, showDiff, filterOnly, additionalArgs)))
.pipe(process.stdout)
.on('error', handleErrors)
