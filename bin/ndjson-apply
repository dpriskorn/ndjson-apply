#!/usr/bin/env node
const path = require('path')
let args = process.argv.slice(2)
const showDiff = args.includes('--diff')
const filterOnly = args.includes('--filter')
args = args.filter(arg => arg[0] !== '-')
const [ fnModulePath, ...additionalArgs ] = args

if (!fnModulePath) throw new Error('missing function module path')

const resolvedPath = path.resolve(fnModulePath)
let transformFn = require(resolvedPath)

if (additionalArgs[0]) {
  const key = additionalArgs[0]
  if (typeof transformFn[key] === 'function') {
    additionalArgs.shift()
    transformFn = transformFn[key]
  }
}

if (typeof transformFn !== 'function') throw new Error(`${resolvedPath} doesn't export a function`)

const split = require('split')
const through = require('through')
const { isAsyncFunction } = require('../lib/utils')
const lineTransformers = require('../lib/line_transformers')
const handleErrors = require('../lib/handle_errors')

const transformer = isAsyncFunction(transformFn) ? lineTransformers.async : lineTransformers.sync

process.stdin
.pipe(split())
.pipe(through(transformer(transformFn, showDiff, filterOnly, additionalArgs)))
.pipe(process.stdout)
.on('error', handleErrors)
